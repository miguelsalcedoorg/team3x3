pipeline {
agent any

    stages{
        stage('Login, Build and Push'){
            steps {
                script{
                    //sign into docker, build image, and push image to dockerhub
                    withDockerRegistry(credentialsId: 'Docker') {
                        docker.build('team3/flaskapp').push('latest')
                    }
                }
            }
        }
        stage('AWS Commands'){
            steps {
                
                    // sign into AWS
                    
                        sh 'aws sts get-caller-identity'
                    
            }
        }
        stage('Kubernetes login'){
            steps{
                    //Exact same for everyone in the class except the credential variable, use your own credential variable id.  Update kubeconfig in container
                    
                        sh 'aws eks update-kubeconfig --region us-east-1 --name VETTEC'
            }
        }

            stage('Create Namespace'){
            steps {
                script {
                    try {
                            sh 'kubectl apply -f manifest.yaml'
                            sh 'kubectl rollout restart deployment flask-deployment -n team3-namespace'
                        } catch (Exception e) {
                            echo 'Exception occured: ' + e.toString()
                            echo 'Handled the Exception!'
                        }
                    }

            }
            }
}

// tools {
//   terraform 'Terraform'
// }
//     stages {
//         stage('Checkout') {
//             steps {
//                 checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/miguelsalcedoorg/team3x3.git']]])
//             }
//         }
//         stage ('Terraform version') { 
//             steps {
//                 sh '''
//                      terraform --version
//                      ''' 
//             }
//         }
    
//         stage ('Terraform init') { 
//             steps {
//                  sh '''
//                     terraform init
//                     ''' 
//             }
//         }
//         stage ('Terraform apply') { 
//             steps {
//                 sh '''
//                     terraform apply --auto-approve
//                     ''' 
//             }
//         post { 
//             always { 
//                 cleanWs()
//                 }
//             }
//        }
//     }
// }

